name: Deploy Recipe App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build Recipe App
        run: npm run build
        env:
          NODE_ENV: production

      - name: Prepare SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/recipe-app-key
          chmod 600 ~/.ssh/recipe-app-key
          ssh-keyscan -H ${{ secrets.INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          INSTANCE_IP: ${{ secrets.INSTANCE_IP }}
        run: |
          echo "Starting deployment to $INSTANCE_IP..."

          # Create a deployment timestamp
          DEPLOY_TIMESTAMP=$(date +%Y%m%d_%H%M%S)

          # Create new directory with timestamp
          ssh -i ~/.ssh/recipe-app-key ec2-user@$INSTANCE_IP "\
            mkdir -p ~/recipe-app-$DEPLOY_TIMESTAMP"

          # Copy files to the new directory
          echo "Copying files to server..."
          scp -i ~/.ssh/recipe-app-key package*.json ec2-user@$INSTANCE_IP:~/recipe-app-$DEPLOY_TIMESTAMP/
          scp -i ~/.ssh/recipe-app-key -r .next ec2-user@$INSTANCE_IP:~/recipe-app-$DEPLOY_TIMESTAMP/

          # Deploy with zero downtime
          ssh -i ~/.ssh/recipe-app-key ec2-user@$INSTANCE_IP "\
            cd ~/recipe-app-$DEPLOY_TIMESTAMP && \
            echo 'Installing dependencies...' && \
            npm ci --production && \
            echo 'Stopping previous application version...' && \
            pm2 delete recipe-app || true && \
            echo 'Moving new version into place...' && \
            rm -rf ~/recipe-app && \
            mv ~/recipe-app-$DEPLOY_TIMESTAMP ~/recipe-app && \
            echo 'Starting new application version...' && \
            cd ~/recipe-app && \
            PORT=3000 NODE_ENV=production pm2 start npm --name 'recipe-app' -- start && \
            pm2 save && \
            echo 'Clearing old deployments...' && \
            find ~/ -maxdepth 1 -name 'recipe-app-*' -type d -mtime +7 -exec rm -rf {} \;"

      - name: Update Nginx Configuration
        env:
          INSTANCE_IP: ${{ secrets.INSTANCE_IP }}
        run: |
          # Create temporary Nginx configuration file locally
          cat > nginx.conf << 'EOF'
          server {
              listen 80;
              server_name _;

              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
                  
                  # Add cache control headers
                  add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate';
                  add_header Pragma 'no-cache';
                  expires 0;
              }
          }
          EOF

          # Copy the configuration to the server
          scp -i ~/.ssh/recipe-app-key nginx.conf ec2-user@$INSTANCE_IP:~/nginx.conf

          # Move the configuration file to the correct location and restart Nginx
          ssh -i ~/.ssh/recipe-app-key ec2-user@$INSTANCE_IP "\
            sudo mv ~/nginx.conf /etc/nginx/conf.d/recipe-app.conf && \
            sudo systemctl restart nginx"

      - name: Verify Deployment
        env:
          INSTANCE_IP: ${{ secrets.INSTANCE_IP }}
        run: |
          # Wait for the application to start
          sleep 10
          # Check if the application is responding
          curl --retry 5 --retry-delay 5 -f http://$INSTANCE_IP || (echo "Deployment verification failed" && exit 1)

      - name: Clean up SSH Key
        if: always()
        run: rm -f ~/.ssh/recipe-app-key
